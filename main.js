/*let name = ["yousef", "mohamed", "Elzero"]let prou = ["ar", "en"]let mohaf = ["egebt", "somal"];for (let i = 0; i < name.length; i++) {    console.log("#".repeat(8));    console.log(name[i])    console.log("#".repeat(8));    console.log("elpld :");    for (let e = 0; e < mohaf.length; e++) {        console.log(`-- ${mohaf[e]}`)    }    console.log("lagat :");    for (let l = 0; l < prou.length; l++) {        console.log(`-- ${prou[l]}`)    }}// let name = [1, "yousef", 5, 8 , "mohamed", 20 ,  "Elzero"]// let numbers = [];// console.log(typeof name[0])//// for (let i = 0; i < name.length; i++) {//     if (typeof name[i] === "number") {//         numbers.push(name[i])//     }// }// console.log(numbers);// تطبيق  ع  functionfunction showInfo(us = "UN", ag = "UN", rt = 0, show = "y", ...sk) {    document.write(`<div>`)    document.write(`<h3>Welcome ${us}</h3>`)    document.write(`<p>Age ${ag}</p>`)    document.write(`<p>Hour Rate Eg:${rt}</p>`)    document.write(`<ul><h4>Skils</h4> `)    if (show === "y") {      if (sk.length > 0){          for (let i = 0 ; i < sk.length ; i++)          {              document.write(`<li> ${sk[i]} </li>`)          }      }else {          document.write(`no skils`)      }    }    else {        document.write(`Skalis  hedn`)    }    document.write(`</ul>`)    document.write(`</div>`)}showInfo("yousef", 21, 89 ,"y" , "html" , "css" , "php")*/// function Inested function/*function name(fName , lName){    let massege = "Hello :"    function Tramb()    {      return   console.log(`${massege} ${fName} ${lName}`)    }    return Tramb();}name("yousef" ,"ibrahem")*/// Arrow function// الفنكشن العاديه/*function num (number){    return number;}console.log(num(56))*/// Arrow function/*let  num = number => number; //في  حاله  عنصر  واحد  لا نستخدم  ()let  numrs = (...nmb) => number;console.log(num(56 , 85))function specialMix(...data) {    let result = 0,        i = 0;    for (; i < data.length; i++) {        if (typeof data[i] === "number") {            result += data[i];        } else if (!isNaN(parseInt(data[i].replace(/[^0-9]/g, "")))) {            result += +data[i].replace(/[^0-9]/g, "");        }    }    result === 0 ? (result = "All Is Strings") : "";    return result;}*///  -------------------------------------------function Map------------------------------------// let myNumber = [1 , 2, 3, 4 , 5 , 6]/*let  sum = [];    for (let i =0 ; i< myNumber.length ; i++)    {        sum.push(myNumber[i] + myNumber[i])    }console.log(sum)*///Same Idea With Map/*let addSelf = myNumber.map(function (element , index , arr){ return element + element} , 10)console.log(addSelf)*/// let addSelf = myNumber.map((element)=> element + element)// console.log(addSelf)////// // تحويل الكابتل  الي  سمول والسمول الي  كابتل// let  swappingCases = "elZERo"// let SW = swappingCases.split("").map(function (ele){//     return ele === ele.toUpperCase() ? ele.toLowerCase() : ele.toUpperCase()// }).join("")//// console.log(SW)//// // تحويل  السالب الي  موجب  والموجب  الي  سالب// let  invertedNumbers = [1 , -10 , -20 ,15 ,100 , -30]//// let INV = invertedNumbers.map(function (ele){//     return -ele// })//// console.log(INV)//// // استخراج  النص  من  الارقام// // Arrow Function// let  ignoreBooleans = "Elz12345er4o"// let ING = ignoreBooleans.split("").map((ele) => isNaN(ele) === true ? ele : "").join("")// console.log(ING)////  -------------------------------------------function Filter------------------------------------/*// الارقام  الزوجيه  فقطlet n = [2 , 9 , 10 , 40 , 3]let na = n.filter(function (e){    return e % 2 === 0;})console.log(na)// الاسماء  الي  اول حرف  فيها S// Arrow Functionlet nam = ["samer" , "yousef" , "Sadd" , "moh" , "sheren"]let name = nam.filter((e)=> e.startsWith("s") || e.startsWith("S"))console.log(name)// هتي  الكلامات الي  عدد حروفها لايذيد عن 4let ste = "I love Foode code too playing much" ;let strang = ste.split(" ").filter(function (e){    return e.length <= 4 ;}).join(" ")console.log(strang)let  mix = "A13Bs2ZX"let ing = mix.split("").filter((e)=> isNaN(e) === false ? e : "").map( (e)=>  e * e);console.log(ing)*///  -------------------------------------------function Reduce------------------------------------/*// جمع جميع  الارقامlet v = [2 , 9 , 10 , 40 , 3]let m = v.reduce(function (e , c, n , a) {    return e + c}, 1 /!*1 + 2 + 9 + 10 + 40 + 3*!/ /!*القيمه  الي  هتبداء  بيها*!/)console.log(m)*///  -------------------------------------------ForEach------------------------------------/*// عند  الضغط علي  عنصر  يضيف كلاسlet aiilis = document.querySelectorAll("ul li");let allDiv = document.querySelectorAll(".content div")aiilis.forEach(function (e) {    e.onclick = function () {        aiilis.forEach(function (e) {            e.classList.remove("active")        });        this.classList.add("active")        allDiv.forEach(function (e) {            e.style.display = "none";        })    }})*///  -------------------------------------------object------------------------------------/*let user = {    Name: "yousef",    age: 20,    skills: ["HTML", "CSS", "JS"],    availabel: false,    addresses: {        Ksa: "Ri",        egypt: {            one: "ca",            twe: "Mansora",        }    },    checked : function () {      if (this.availabel === true){          return "yas  availabel"      }else {          return "NO  availabel"      }    }}console.log(user.Name)console.log(user.age)console.log(user.skills)console.log(user.addresses.egypt.one)console.log(user.addresses.Ksa)console.log(user.addresses.egypt.twe)console.log(user.checked())*///  -------------------------------------------new keyword nwe object------------------------------------/*let userName = {    country : "eg"}userName.name = "yousef"; // اضافه في  objectuserName["age"] = 20;userName.country = "sa"; // نحديث  القيمه  القديمهconsole.log(userName)document.getElementById("cl").onclick = function () {    console.log(this)}//  -------------------------------------------assign method------------------------------------let  finalObject = Object.assign(userName)finalObject.name = "ibrahim"; // اضافه في  objectconsole.log(finalObject)*///  -------------------------------------------DOM Select------------------------------------// document.getElementById("Id")  // الوصول  للعنصر  عن  طريق  id// document.getElementsByTagName("Tag") // الوصول  للعنصر  عن  طريق  Tag// document.getElementsByClassName("Class") // الوصول  للعنصر  عن  طريق  Class// document.querySelector("tag" او "class" او "id") // هيرجع  اول  عنصر  فقط// document.querySelectorAll("tag" او "class" او "id") // هيرجع جميع  العناصر  علي  شكل  arry// document.title// document.body// document.images// document.forms// document.links//  -------------------------------------------DOM------------------------------------/*let  ID = document.getElementById("cl");let  TAg = document.getElementsByTagName("button");console.log(TAg[1])*//*let  IID = document.querySelector(".js");IID.textContent = "text content";IID.innerHTML = "text form";*///  -------------------------------------------DOM Create Elements------------------------------------// Create Elements/*let myd =  document.createElement("div") // اضافه  div  لل  الصفحهmyd.className= "Product" ; // انشاء  كلاس  لل divmyd.setAttribute("data-test" , "lp") // عمل  Attribut جديدlet mycom = document.createComment("Comment") // عمل كومنتfor (let i = 1 ; i <= 100 ; i++){    let myh2 =  document.createElement("h2")  // اضافه  h2  لل  الصفحه    let myp =  document.createElement("p")  // اضافه  p  لل  الصفحه// Create Text Elements    let myHT = document.createTextNode(`Product tile ${i}`)    let myPT = document.createTextNode(`Product Descrabshn ${i}`)// Add Text    myh2.appendChild(myHT)    myp.appendChild(myPT)// Add class in div// Add h2 & p in div    myd.appendChild(myh2)    myd.appendChild(myp)}document.body.appendChild(myd)*///  -------------------------------------------DOM  With Children------------------------------------//let  ID = document.getElementById("cl"); // هاتلي  العنصر  الي  (id) = cl// ID.children // هاتلي  جميع  التاج  الداخليه// ID.children[0] // هاتلي  جميع  التاج  الداخليه// ID.cloneNodes // هاتلي  جميع  التاج و العناصر  و  الكومنتات  و النصوص   الداخليه/*console.log(ID);console.log(ID.children);console.log(ID.children[0]);console.log(ID.childNodes);console.log(ID.childNodes[0]);console.log(ID.firstChild);console.log(ID.lastChild);console.log(ID.firstElementChild);console.log(ID.lastElementChild);*///  -------------------------------------------DOM  Events------------------------------------/*- Use Events On HTML- Use Events On JS--- onclick--- oncontextmenu--- onmouseenter--- onmouseleave--- onload--- onscroll--- onresize--- onfocus--- onblur--- onsubmit*///  -------------------------------------------DOM request Events------------------------------------/*let userName = document.querySelector("[name='UserName']")let Age =document.querySelector("[name='age']")document.forms[0].onsubmit = function (e) {    let UValid  = false;    let AValid  = false;    if (userName.value !== "" && userName.value.length <= 10)    {        UValid = true;    }    if (Age.value !== "" )    {        AValid = true;    }    if (UValid === false || AValid === false)    {        e.preventDefault();    }}document.links[0].onclick = function (e) {    e.preventDefault();}*///  -------------------------------------------DOM  Events Simulation------------------------------------// -- click // لما اضغط// -- Focus // ركزلي  عليه// -- blur // عكس  التركيز/*<form action="">    <input type="text" className="one">        <input type="text" className="tow">            <input type="submit" value="Submit Data"></form><a href="https://google.com" target="_blank">Google</a>*//*let  one = document.querySelector(".one")let  Tow = document.querySelector(".tow")let  submit = document.querySelector("[type=submit]")window.onload = function () {    one.focus()}if (one.value.length === 1 ) {    one.blur()}*///  -------------------------------------------DOM classList------------------------------------/*  DOM [Class List]  - classList  --- length  --- contains  --- item(index)  --- add  --- remove  --- toggle // لو الكلاس  موجود  يحذفو  لو  مش  موجود  بيضيفو*//*let elment = document.getElementById("div");elment.classList.add("mon" )elment.onclick = function () {    elment.classList.add("momomo")}elment.classList.replace("mon" , "nor")elment.classList.remove( "nor")console.log(elment.classList.contains( "nor")) // هل  الكلاس nor موجودconsole.log(elment.classList.item( 0))console.log(elment.classList)*///  -------------------------------------------DOM CSS Style------------------------------------/*  DOM [Css ]  --- style  --- cssTex  --- removeProperty (propertyName) [Inline , stylesheet]  --- setProperty(propertyName , value , priority)*//*let elm = document.getElementById("div");elm.style.color = "red" ;elm.style.fontWeight = "bold" ; // camel caseelm.style.cssText = "font-weight : bold ; color : green ; opacity : 0.9" // css styleelm.style.removeProperty("opacity")elm.style.setProperty("font-size" , "40px" , "important")document.styleSheets[0].rules[0].style.removeProperty("box-sizing")document.styleSheets[0].rules[0].style.setProperty("background-color" , "red" , "important")*///  -------------------------------------------DOM Deal with Elements------------------------------------/*let element = document.getElementById("div");let p = "command"element.after(p) // الاضافه  بعد  eelement.before(p) // الاضافه  قبل  eelement.prepend(p) //  الاضافه  داخل e في  الاولelement.append(p) //  الاضافه  داخل e في  الاخرelement.remove(p) //  احذف p*///  -------------------------------------------DOM Traversing------------------------------------/*  DOM [Traversing]  -  // العنصر  التالي  مباشر  - previousSibling /العنصر السابق  مباشر  - nextElementSibling الا ايلمنت  التالي  - previousElementSibling الاليمنت السابق  - parentElement // العنصر  الاب*///  -------------------------------------------DOM Cloning------------------------------------/*let element = document.getElementById("div");element.cloneNode(true) // استنساخ  العنصر  ب  العناصر  الداخليهelement.cloneNode(false) // استنساخ  العنصر  بدون  العناصر  الداخليه*///  -------------------------------------------DOM Add Event listener------------------------------------/*/!*  DOM [Add Event Listener]  - addEventListener  - Use Without On  - Attach Multiple Events  - Error Test  Search  - Capture & Bubbling JavaScript  - removeEventListener*!/let myP = document.querySelector("p");// myP.onclick = one;// myP.onclick = two;// function one() {//   console.log("Message From OnClick 1");// }// function two() {//   console.log("Message From OnClick 2");// }// window.onload = "Osama";// myP.addEventListener("click", function () {//   console.log("Message From OnClick 1 Event");// });// myP.addEventListener("click", one);// myP.addEventListener("click", two);// myP.addEventListener("click", "String"); // ErrormyP.onclick = function () {    let newP = myP.cloneNode(true);    newP.className = "clone";    document.body.appendChild(newP);};// let cloned = document.querySelector(".clone"); // Error// cloned.onclick = function () {//   console.log("Iam Cloned");// };document.addEventListener("click", function (e) {    if (e.target.className === "clone") {        console.log("Iam Cloned");    }});*///  -------------------------------------------------------------------------------------//  -------------------------------------------------------------------------------------//  -------------------------------------------Bom Browser object model------------------------------------/*  BOM [Browser Object Model]  - alert(Message) => Need No Response Only Ok Available  - confirm(Message) => Need Response And Return A Boolean  - prompt(Message, Default Message) => Collect Data*/// alert("Test");// console.log("Test");// let confirmMsg = confirm("Are You Sure?");// console.log(confirmMsg);// if (confirmMsg === true) {//   console.log("Item Deleted");// } else {//   console.log("Item Not Deleted");// }/*let promptMsg = prompt("Good Day To You?", "Write Day With 3 Characters");console.log(promptMsg);*///  -------------------------------------------Bom Browser object model------------------------------------/*  BOM [Browser Object Model]  - setTimeout(Function, Timeout, Additional Params)  - clearTimeout(Identifier)*/// setTimeout(function () {//   console.log("Msg");// }, 3000);// setTimeout(sayMsg, 3000);// function sayMsg() {//   console.log(`Iam Message`);// }// setTimeout(sayMsg, 3000, "Osama", 38);// function sayMsg(user, age) {//   console.log(`Iam Message For ${user} Age Is : ${age}`);// }/*let btn = document.querySelector("button");btn.onclick = function () {    clearTimeout(counter);};function sayMsg(user, age) {    console.log(`Iam Message For ${user} Age Is : ${age}`);}let counter = setTimeout(sayMsg, 3000, "Osama", 38);*///  -------------------------------------------Bom Browser object model------------------------------------/*  BOM [Browser Object Model]  - setInterval(Function, Millseconds, Additional Params)  - clearInterval(Identifier)*/// setInterval(function () {//   console.log(`Msg`);// }, 1000);// setInterval(sayMsg, 1000);// function sayMsg() {//   console.log(`Iam Message`);// }// setInterval(sayMsg, 1000, "Osama", 38);// function sayMsg(user, age) {//   console.log(`Iam Message For ${user} His Age Is: ${age}`);// }/*let div = document.querySelector("div");function countdown() {    div.innerHTML -= 1;    if (div.innerHTML === "0") {        clearInterval(counter);    }}let counter = setInterval(countdown, 1000);*///  -------------------------------------------Bom Location object------------------------------------/*  BOM [Browser Object Model]  - location Object  --- href Get / Set [URL || Hash || File || Mail]  --- host  --- hash  --- protocol  --- reload()  --- replace()  --- assign()*//*console.log(location);console.log(location.href);*/// location.href = "https://google.com";// location.href = "/#sec02";// location.href = "https://developer.mozilla.org/en-US/docs/Web/JavaScript#reference";// console.log(location.host);// console.log(location.hostname);// console.log(location.protocol);// console.log(location.hash);let button = document.querySelector("button");button.onclick = function () {    window.scroll({        top: 0,        left: 0,        behavior: "smooth"    })}window.onscroll = function () {    if (window.scrollY < 700) {        button.style.display = "none"    }    if (window.scrollY >= 700) {        button.style.display = "block"    }}//  -------------------------------------------Bom Local Storage------------------------------------/*  BOM [Browser Object Model]  Local Storage  - setItem  - getItem  - removeItem  - clear  - key  Info  - No Expiration Time  - HTTP And HTTPS  - Private Tab*//*// Setwindow.localStorage.setItem("color", "#F00");window.localStorage.fontWeight = "bold";window.localStorage["fontSize"] = "20px";// Getconsole.log(window.localStorage.getItem("color"));console.log(window.localStorage.color);console.log(window.localStorage["color"]);// Remove One// window.localStorage.removeItem("color");// Remove All// window.localStorage.clear();// Get Keyconsole.log(window.localStorage.key(0));// Set Color In Pagedocument.body.style.backgroundColor = window.localStorage.getItem("color");console.log(window.localStorage);console.log(typeof window.localStorage);*///  -------------------------------------------Bom Local Storage------------------------------------/*  BOM [Browser Object Model]  Local Storage Practice*/let lis = document.querySelectorAll("ul li");let exp = document.querySelector(".experiment");if (window.localStorage.getItem("color")) {    // If There Is Color In Local Storage    // [1] Add Color To Div    exp.style.backgroundColor = window.localStorage.getItem("color");    // [2] Remove Active Class From All Lis    lis.forEach((li) => {        li.classList.remove("active");    });    // [3] Add Active Class To Current Color    document.querySelector(`[data-color="${window.localStorage.getItem("color")}"]`).classList.add("active");}lis.forEach((li) => {    li.addEventListener("click", (e) => {        // console.log(e.currentTarget.dataset.color);        // Remove Active Class From all Lis        lis.forEach((li) => {            li.classList.remove("active");        });        // Add Active Class To Current Element        e.currentTarget.classList.add("active");        // Add Current Color To Local Storage        window.localStorage.setItem("color", e.currentTarget.dataset.color);        // Change Div Background Color        exp.style.backgroundColor = e.currentTarget.dataset.color;    });});//  -------------------------------------------Bom SessionStorage------------------------------------document.querySelector(".name").onblur = function () {    // console.log(this.value)    window.localStorage.setItem("input-name", this.value)}//  -------------------------------------------Destructuring------------------------------------/*  Destructuring  " is a JavaScript expression that allows us to extract data from arrays,    objects, and maps and set them into new, distinct variables. "  - Destructuring Array*/let a = 1;let b = 2;let c = 3;let d = 4;let myFriends = ["Ahmed", "Sayed", "Ali", "Maysa"];[a = "A", b, c, d, e = "Osama"] = myFriends;/*console.log(a);console.log(b);console.log(c);console.log(d);console.log(e);*/// console.log(myFriends[4]);let [, y, , z] = myFriends;/*console.log(y);console.log(z);*/let myFriends2 = ["Ahmed", "Sayed", "Ali", ["Shady", "Amr", ["Mohamed", "Gamal"]]];[, , , [a, , [, b]]] = myFriends2console.log(a) //Shadyconsole.log(b) //Gamal/*  Destructuring  - Destructuring Array => Swapping Variables --------------------------------------------------------------------------*/let book = "Video";let video = "Book";// // Save Book Value In Stash// let stash = book; // Video// // Change Book Value// book = video; // Book// // Change Video Value// video = stash; // Video[book, video] = [video, book];console.log(book); // Bookconsole.log(video); // Video/*  Destructuring  - Destructuring Object -----------------------------------------------------------------------------------------------*//*const user = {    theName: "Osama",    theAge: 39,    theTitle: "Developer",    theCountry: "Egypt",};*/// console.log(user.theName);// console.log(user.theAge);// console.log(user.theTitle);// console.log(user.theCountry);// let theName = user.theName;// let theAge = user.theAge;// let theTitle = user.theTitle;// let theCountry = user.theCountry;// console.log(theName);// console.log(theAge);// console.log(theTitle);// console.log(theCountry);// ({ theName, theAge, theTitle, theCountry } = user);const user = {    theName: "Osama",    theAge: 39,    theTitle: "Developer",    theCountry: "Egypt",};const {theName, theAge, theCountry} = user;console.log(theName);console.log(theAge);console.log(theCountry);/*  Destructuring  - Destructuring Object -----------------------------------------------------------------------------------------------  --- Naming The Variables  --- Add New Property  --- Nested Object  --- Destructuring The Nested Object Only*/const user2 = {    theName: "Osama",    theAge: 39,    theTitle: "Developer",    theCountry2: "Egypt",    theColor: "Black",    skills: {        html: 70,        css: 80,    },};const {    theName: nn,    theAge: aa,    theCountry2,    theColor2: cco = "Red",    skills: {html: h, css},} = user2;console.log(nn);console.log(aa);console.log(theCountry2);console.log(cco);console.log(`My HTML Skill Progress Is ${h}`);console.log(`My CSS Skill Progress Is ${css}`);const {html: skillOne, css: skillTwo} = user2.skills;console.log(`My HTML Skill Progress Is ${skillOne}`);console.log(`My CSS Skill Progress Is ${skillTwo}`);/*  Destructuring  - Destructuring Function Parameters ----------------------------------------------------------------------------------*/const user3 = {    theName: "Osama",    theAge: 22,    skills: {        html: 70,        css: 32.5,    },};showDetails(user3);// function showDetails(obj) {//   console.log(`Your Name Is ${obj.theName}`);//   console.log(`Your Age Is ${obj.theAge}`);//   console.log(`Your CSS Skill Progress Is ${obj.skills.css}`);// }function showDetails({theName: n, theAge: a, skills: {css: c}} = user) {    console.log(`Your Name Is ${n}`);    console.log(`Your Age Is ${a}`);    console.log(`Your CSS Skill Progress Is ${c}`);}/*  - Set Data Type --------------------------------------------------------------------------------------------  Syntax: new Set(Iterable)  -- Object To Store Unique Values  -- Cannot Access Elements By Index  Properties:  - size  Methods:  - add  - delete  - clear  - has*/console.log(" Syntax: new Set(Iterable)")let myData = [1, 1, 1, 2, 3, "A"];// let myUniqueData = new Set([1, 1, 1, 2, 3]);// let myUniqueData = new Set(myData);// let myUniqueData = new Set().add(1).add(1).add(1).add(2).add(3);let myUniqueData = new Set();myUniqueData.add(1).add(1).add(1);myUniqueData.add(2).add(3).add("A");console.log(`Is Set Has => A ${myUniqueData.has("a".toUpperCase())}`);console.log(myData);console.log(myUniqueData);console.log(myUniqueData.size);console.log(myData[0]);console.log(myUniqueData[0]);// myUniqueData.delete(2);console.log(myUniqueData.delete(2));console.log(myUniqueData);console.log(myUniqueData.size);myUniqueData.clear();console.log(myUniqueData);console.log(myUniqueData.size);/*  - Set vs WeakSet ----------------------------------------------------------------------------------  "    The WeakSet is weak,    meaning references to objects in a WeakSet are held weakly.    If no other references to an object stored in the WeakSet exist,    those objects can be garbage collected.  "  --  Set     => Can Store Any Data Values  WeakSet => Collection Of Objects Only  --  Set     => Have Size Property  WeakSet => Does Not Have Size Property  --  Set     => Have Keys, Values, Entries  WeakSet => Does Not Have clear, Keys, Values And Entries  --  Set     => Can Use forEach  WeakSet => Cannot Use forEach  Usage: Store objects and removes them once they become inaccessible*/// Type Of Datalet mySet = new Set([1, 1, 1, 2, 3, "A", "A"]);console.log(mySet);// Sizeconsole.log(`Size Of ElementsR Inside Set Is: ${mySet.size}`);// Values + Keys [Alias For Values]let iterator = mySet.keys();console.log(iterator.next().value);console.log(iterator.next().value);console.log(iterator.next().value);console.log(iterator.next().value);console.log(iterator.next());// forEachmySet.forEach((el) => console.log(el));console.log("#".repeat(20));// Type Of Datalet myws = new WeakSet([{A: 1, B: 2}]);console.log(myws);/*  - Map Data Type --------------------------------------------------------------------------  Syntax: new Map(Iterable With Key/Value)  -- Map vs Object  --  ------ Map => Does Not Contain Key By Default  ------ Object => Has Default Keys  --  ------ Map => Key Can Be Anything [Function, Object, Any Primitive Data Types]  ------ Object => String Or Symbol  --  ------ Map => Ordered By Insertion  ------ Object => Not 100% Till Now  --  ------ Map => Get Items By Size  ------ Object => Need To Do Manually  --  ------ Map => Can Be Directly Iterated  ------ Object => Not Directly And Need To Use Object.keys() And So On  --  ------ Map => Better Performance When Add Or Remove Data  ------ Object => Low Performance When Comparing To Map*/let myObject = {};let myEmptyObject = Object.create(null);let myMap = new Map();console.log(myObject);console.log(myEmptyObject);console.log(myMap);let myNewObject = {    10: "Number",    "10": "String",};console.log(myNewObject[10]);let myNewMap = new Map();myNewMap.set(10, "Number");myNewMap.set("10", "String");myNewMap.set(true, "Boolean");myNewMap.set({a: 1, b: 2}, "Object");myNewMap.set(function doSomething() {}, "Function");console.log(myNewMap.get(10));console.log(myNewMap.get("10"));console.log("####");console.log(myNewObject);console.log(myNewMap);/*  - Map Data Type --------------------------------------------------------------------------------------------  Methods  --- set  --- get  --- delete  --- clear  --- has  Properties  --- size*//*let myMap = new Map([    [10, "Number"],    ["Name", "String"],    [false, "Boolean"],]);// myMap.set(10, "Number");// myMap.set("Name", "String");console.log(myMap);console.log(myMap.get(10));console.log(myMap.get("Name"));console.log(myMap.get(false));console.log("####");console.log(myMap.has("Name"));console.log("####");console.log(myMap.size);console.log(myMap.delete("Name"));console.log(myMap.size);myMap.clear();console.log(myMap.size);*//*  - Map vs WeakMap -----------------------------------------------------------------------------------  "    WeakMap Allows Garbage Collector To Do Its Task But Not Map.  "  --  Map     => Key Can Be Anything  WeakMap => Key Can Be Object Only  --*//*let mapUser = { theName: "Elzero" };let myMap = new Map();myMap.set(mapUser, "Object Value");mapUser = null; // Override The Referenceconsole.log(myMap);console.log("#".repeat(20));let wMapUser = { theName: "Elzero" };let myWeakMap = new WeakMap();myWeakMap.set(wMapUser, "Object Value");wMapUser = null; // Override The Referenceconsole.log(myWeakMap);*///- Array Methods -----------------------------------------------------------------------------------//- Array.from -----------------------------------------------------------------------------------// console.log(Array.from("12345"))console.log(    Array.from("12345", function (e) {        return +e + +e    }));console.log(Array.from("yousef"))//- Array.from -----------------------------------------------------------------------------------let mya = ["s", "e", "f", "y", "o", "u"]mya.copyWithin(0, 3,) // "y", "o", "u", "y", "o", "u"console.log(mya)//- Array.Some -----------------------------------------------------------------------------------// لو  االعناصر  انطبق  عليها  الشرط  = truelet locSome = {    20: "Place 1",    30: "Place 2",    50: "Place 3",    40: "Place 4",}let mainLoSome = 15;let locationsSome =    Object.keys(locSome) // هاتلي  key  فقط  من object        .map((n) => +n) // حولي  الارقام  String  الي  ارقام  صحيحهlet cecSome = locationsSome.every(function (e) {    return e > this}, mainLoSome)console.log(cecSome)//- Array.every -----------------------------------------------------------------------------------// لو كل االعناصر  انطبق  عليها  الشرط  = truelet locEvery = {    20: "Place 1",    30: "Place 2",    50: "Place 3",    40: "Place 4",}let mainLoEvery = 15;let locationsEvery =    Object.keys(locEvery) // هاتلي  key  فقط  من object        .map((n) => +n) // حولي  الارقام  String  الي  ارقام  صحيحهlet cecEvery = locationsEvery.every(function (e) {    return e > this}, mainLoEvery)console.log(cecEvery)/*  Spread Operator => ...Iterable -------------------------------------------------------------------------------  "Allow Iterable To Expand In Place"*/// Spread With String => Expand Stringconsole.log("Osama");console.log(..."Osama");console.log([..."Osama"]);// Concatenate Arrayslet myArray1 = [1, 2, 3];let myArray2 = [4, 5, 6];let allArrays = [...myArray1, ...myArray2];console.log(allArrays);// Copy Arraylet copiedArray = [...myArray1];console.log(copiedArray);// Push Inside Arraylet allFriends = ["Osama", "Ahmed", "Sayed"];let thisYearFriends = ["Sameh", "Mahmoud"];allFriends.push(...thisYearFriends);console.log(allFriends);// Use With Math Objectlet myNums = [10, 20, -100, 100, 1000, 500];console.log(Math.max(...myNums));// Spread With Objects => Merge Objectslet objOne = {    a: 1,    b: 2,};let objTwo = {    c: 3,    d: 4,};console.log({...objOne, ...objTwo, e: 5});/* JavaScript Array Full Methods----------------------------------------------------------------------------------- concat() 	Joins arrays and returns an array with the joined arraysconstructor 	Returns the function that created the Array object's prototypecopyWithin() 	Copies array elements within the array, to and from specified positionsentries() 	Returns a key/value pair Array Iteration Objectevery() 	Checks if every element in an array pass a testfill() 	Fill the elements in an array with a static valuefilter() 	Creates a new array with every element in an array that pass a testfind() 	Returns the value of the first element in an array that pass a testfindIndex() 	Returns the index of the first element in an array that pass a testforEach() 	Calls a function for each array elementfrom() 	Creates an array from an objectincludes() 	Check if an array contains the specified elementindexOf() 	Search the array for an element and returns its positionisArray() 	Checks whether an object is an arrayjoin() 	Joins all elements of an array into a stringkeys() 	Returns a Array Iteration Object, containing the keys of the original arraylastIndexOf() 	Search the array for an element, starting at the end, and returns its positionlength 	Sets or returns the number of elements in an arraymap() 	Creates a new array with the result of calling a function for each array elementpop() 	Removes the last element of an array, and returns that elementprototype 	Allows you to add properties and methods to an Array objectpush() 	Adds new elements to the end of an array, and returns the new lengthreduce() 	Reduce the values of an array to a single value (going left-to-right)reduceRight() 	Reduce the values of an array to a single value (going right-to-left)reverse() 	Reverses the order of the elements in an arrayshift() 	Removes the first element of an array, and returns that elementslice() 	Selects a part of an array, and returns the new arraysome() 	Checks if any of the elements in an array pass a testsort() 	Sorts the elements of an arraysplice() 	Adds/Removes elements from an arraytoString() 	Converts an array to a string, and returns the resultunshift() 	Adds new elements to the beginning of an array, and returns the new lengthvalueOf() 	Returns the primitive value of an array* *//*  Regular Expression --------------------------------------------------------------------------------------------  Regular Expression --------------------------------------------------------------------------------------------  Regular Expression --------------------------------------------------------------------------------------------  Regular Expression --------------------------------------------------------------------------------------------  Syntax  /pattern/modifier(s);  new RegExp("pattern", "modifier(s)")  Modifiers => Flags  i => case-insensitive  g => global  m => Multilines  Search Methods  - match(Pattern)  Match  -- Matches A String Against a Regular Expression Pattern  -- Returns An Array With The Matches  -- Returns null If No Match Is Found.*/let myString = "Hello Elzero Web School I Love elzero";let regex = /elzero/ig;console.log(myString.match(regex));/*- Part 1 --------------------------------------------------------------------------------------------------(X|Y) => X Or Y    [0-9] => 0 To 9    [^0-9] => Any Character Not 0 To 9Practice- Part 2    [a-z]    [^a-z][A-Z]    [^A-Z][abc]    [^abc]*/let tld = "Com Net Org Info Code Io";let tldRe = /(info|org|io)/ig; // هتل  دي  او دي  او ديconsole.log(tld.match(tldRe)); //"Org", "Info", "Io"let nums = "12345678910";let numsRe = /[0-2]/g; // هتلي  الارقام  الي  مبين 0-2console.log(nums.match(numsRe)); // "1", "2", "1", "0"let notNums = "12345678910"; // الارقام  الي  مشبين  0-2let notNsRe = /[^0-2]/g;console.log(notNums.match(notNsRe)); // 3 , 4 , 5 , 6 , 7 , 8 , 9let specialNums = "1!2@3#4$5%678910";let specialNumsRe = /[^0-9]/g;  // هتلي  العلامات  الي  مبين  الارقامconsole.log(specialNums.match(specialNumsRe)); // ! , @ ,# , $ , %let practice = "Os1 Os1Os Os2 Os8 Os8Os";let practiceRe = /Os[5-9]Os/g; // Os8Osconsole.log(practice.match(practiceRe));let practicee = "AaBbcdefG123!234%^&*";let practiceRee = /[a-z]/ig; // Os8Oslet practiceRees = /[^a-z1-9]/ig; // Os8Osconsole.log(practicee.match(practiceRee));console.log(practicee.match(practiceRees));/*- Part 1 ---------------------------------------------------------------------------------------(X|Y) => X Or Y    [0-9] => 0 To 9    [^0-9] => Any Character Not 0 To 9Practice- Part 2    [a-z]    [^a-z][A-Z]    [^A-Z][abc]    [^abc]*/let myStrings = "AaBbcdefG123!234%^&*";let atozSmall = /[a-z]/g;let NotAtozSmall = /[^a-z]/g;let atozCapital = /[A-Z]/g;let NotAtozCapital = /[^A-Z]/g;let aAndcAnde = /[ace]/g;let NotaAndcAnde = /[^ace]/g;let lettersCapsAndSmall = /[a-zA-Z]/g;let numsAndSpecials = /[^a-zA-Z]/g;let specials = /[^a-zA-Z0-9]/g;console.log(myStrings.match(atozSmall));console.log(myStrings.match(NotAtozSmall));console.log(myStrings.match(atozCapital));console.log(myStrings.match(NotAtozCapital));console.log(myStrings.match(aAndcAnde));console.log(myStrings.match(NotaAndcAnde));console.log(myStrings.match(lettersCapsAndSmall));console.log(myStrings.match(numsAndSpecials));console.log(myStrings.match(specials));/*  Regular Expression ----------------------------------------------------------------------------  Character Classes  . => matches any character, except newline or other line terminators.  \w => matches word characters. [a-z, A-Z, 0-9 And Underscore]  \W => matches Non word characters  \d => matches digits from 0 to 9. // الارقام  \D => matches non-digit characters. // اي حاجه غير  الارقام  \s => matches whitespace character. // المسافات  \S => matches non whitespace character. //اي حاجه غير  المسافات*/let email = 'O@@@g...com O@g.com O@g.net A@Y.com O-g.com o@s.org 1@1.com';let dot = /./g;let word = /\w/g;let valid = /\w@\w.(com|net)/g;console.log(email.match(dot));console.log(email.match(word));console.log(email.match(valid));/*  Regular Expression ----------------------------------------------------------------------------------------  Character Classes  \b => matches at the beginning or end of a word.  \B => matches NOT at the beginning/end of a word.  Test Method  pattern.test(input)*/let names = "Sayed 1Spam 2Spam 3Spam Spam4 Spam5 Osama Ahmed Aspamo";let re = /(\bspam|spam\b)/ig;console.log(names.match(re));console.log(re.test(names));console.log(/(\bspam|spam\b)/ig.test("Osama"));console.log(/(\bspam|spam\b)/ig.test("1Spam"));console.log(/(\bspam|spam\b)/ig.test("Spam1"));/*  Regular Expression  Quantifiers --------------------------------------------------------------------------------------------------  n+    => One Or More  n*    => zero or more  n?    => zero or one*/let mails = "o@nn.sa osama@gmail.com elzero@gmail.net osama@mail.ru"; // All Emails// let mailsRe = /\w+@\w+.(com|net)/ig;let mailsRe = /\w+@\w+.\w+/ig;console.log(mails.match(mailsRe));let numss = "0110 10 150 05120 0560 350 00"; // 0 Numbers Or No 0let numssRe = /0\d*0/ig;console.log(numss.match(numssRe));let urls = "https://google.com http://www.website.net web.com"; // http + httpslet urlsRe = /(https?:\/\/)?(www.)?\w+.\w+/ig;console.log(urls.match(urlsRe));/*  Regular Expression ---------------------------------------------------------------------------------------  Quantifiers  n{x}   => Number of  n{x,y} => Range  n{x,}  => At Least x*/let serials = "S100S S3000S S50000S S950000S";console.log(serials.match(/s\d{3}s/ig)); // S[Three Number]Sconsole.log(serials.match(/s\d{4,5}s/ig)); // S[Four Or Five Number]Sconsole.log(serials.match(/s\d{4,}s/ig)); // S[At Least Four]S/*  Regular Expression  Quantifiers  $  => End With Something  ^  => Start With Something  ?= => Followed By Something  ?! => Not Followed By Something*/let myStringg = "We Love Programming";let namesg = "1OsamaZ 2AhmedZ 3Mohammed 4MoustafaZ 5GamalZ";console.log(/ing$/ig.test(myStringg));console.log(/^we/ig.test(myStringg));console.log(/lz$/ig.test(namesg));console.log(/^\d/ig.test(namesg));console.log(namesg.match(/\d\w{5}(?=Z)/ig));console.log(namesg.match(/\d\w{8}(?!Z)/ig));/*  Regular Expression -----------------------------------------------------------------------------------  - replace  - replaceAll*/let txt = "We * Love % Programming And @ Because @ Is Amazing";console.log(txt.replace("@", "JavaScript"));console.log(txt.replaceAll("@", "JavaScript"));let reg = /@/ig;console.log(txt.replaceAll(reg, "JavaScript"));console.log(txt.replaceAll(/[^a-zA-Z0-9\s]/ig, "JavaScript"));/*  Regular Expression  - Input Form Validation Practice ----------------------------------------------*/document.getElementById("register").onsubmit = function () {    let phoneInput = document.getElementById("phone").value;    let phoneRe = /(011|010|012|015)\d{8}/; // (1234) 567-8910    let validationResult = phoneRe.test(phoneInput);    if (validationResult === false) {        document.getElementById("regi").innerText = "الرقم غير  صحيح"        document.getElementById("regi").style.color = "red"        return false;    }    return true;}/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -> /rex/igm//g 	Perform a global match (find all matches rather than stopping after the first match)//g 	ابحث عن جميع المباريات بدلاً من التوقف بعد المباراة الأولى//i 	Perform case-insensitive matching//i 	إجراء مطابقة غير حساسة لحالة الأحرف//m 	Perform multiline matching//m 	نفذ المطابقة متعددة الأسطر//    [abc] 	Find any character between the brackets//    [abc] 	ابحث عن أي حرف بين القوسين//    [^abc] 	Find any character NOT between the brackets//    [^abc] 	ابحث عن أي حرف ليس بين القوسين//    [0-9] 	Find any character between the brackets (any digit)//    [0-9] 	ابحث عن أي حرف بين القوسين (أي رقم)//    [^0-9] 	Find any character NOT between the brackets (any non-digit)//    [^0-9] 	ابحث عن أي حرف ليس بين قوسين (أي ليس رقمًا)//    (x|y) 	Find any of the alternatives specified//    (x|y) 	ابحث عن أي من البدائل المحددة/*. 	Find a single character, except newline or line terminator. 	ابحث عن حرف واحد ، باستثناء فاصل السطر الجديد أو فاصل السطر\w 	Find a word character\w 	ابحث عن حرف كلمة\W 	Find a non-word character\W 	ابحث عن حرف ليس به كلمة\d 	Find a digit\d 	ابحث عن رقم\D 	Find a non-digit character\D 	ابحث عن حرف غير رقمي\s 	Find a whitespace character\s 	ابحث عن حرف مسافة بيضاء\S 	Find a non-whitespace character\S 	ابحث عن حرف بدون مسافة بيضاء\b 	Find a match at the beginning/end of a word, beginning like this: \bHI, end like this: HI\b\b index\b	 ابحث عن تطابق في بداية او نهاية الكلمة ، بدءًا من هذا: bindex\ ، ينتهي بالشكل التالي:\B 	Find a match, but not at the beginning/end of a word\B 	العثور على تطابق ، ولكن ليس في بداية الكلمة\0 	Find a NULL character\0 	ابحث عن حرف NULL\n 	Find a new line character\n 	ابحث عن حرف سطر جديد\f 	Find a form feed character\f 	ابحث عن حرف سطر جديد\r 	Find a carriage return character\r 	ابحث عن حرف إرجاع\t 	Find a tab character\t 	ابحث عن حرف جدولة\v 	Find a vertical tab character\v 	ابحث عن حرف جدولة عمودي\xxx 	Find the character specified by an octal number xxx\xxx 	ابحث عن الحرف المحدد بالرقم الثماني xxx\xdd 	Find the character specified by a hexadecimal number dd\xdd 	ابحث عن الحرف المحدد برقم سداسي عشري dd\udddd 	Find the Unicode character specified by a hexadecimal number dddd\udddd 	ابحث عن حرف Unicode المحدد بواسطة رقم سداسي عشري dddd*//* n+ 	Matches any string that contains at least one n n+ 	يتطابق مع أي سلسلة تحتوي على n واحد على الأقلn* 	Matches any string that contains zero or more occurrences of nn* 	يتطابق مع أي سلسلة تحتوي على صفر أو أكثر من تكرارات nn? 	Matches any string that contains zero or one occurrences of nn? 	يتطابق مع أي سلسلة تحتوي على صفر أو تكرار واحد لـ nn{X} 	Matches any string that contains a sequence of X n'sn{X} 	تتطابق مع أي سلسلة تحتوي على تسلسل X n'sn{X,Y} 	Matches any string that contains a sequence of X to Y n'sn{X,Y} 	تتطابق مع أي سلسلة تحتوي على تسلسل من X إلى Y nn{X,} 	Matches any string that contains a sequence of at least X n'sn{X,} 	تتطابق مع أي سلسلة تحتوي على سلسلة من X n's على الأقلn$ 	Matches any string with n at the end of itn$ 	تتطابق مع أي سلسلة مع n في نهايتها^n 	Matches any string with n at the beginning of it^n 	تتطابق مع أي سلسلة مع n في بدايتها?=n 	Matches any string that is followed by a specific string n?=n 	يتطابق مع أي سلسلة متبوعة بسلسلة محددة n?!n 	Matches any string that is not followed by a specific string n?!n 	يتطابق مع أي سلسلة غير متبوعة بسلسلة محددة n*//** constructor 	Returns the function that created the RegExp object's prototype* constructor 	تُرجع الدالة التي أنشأت النموذج الأولي لكائن RegExpglobal 	Checks whether the "g" modifier is setglobal 	للتحقق مما إذا كان معدّل "g" قد تم تعيينهignoreCase 	Checks whether the "i" modifier is setignoreCase 	للتحقق مما إذا تم تعيين المعدل "i"lastIndex 	Specifies the index at which to start the next matchlastIndex 	يحدد الفهرس الذي تبدأ عنده المباراة التاليةmultiline 	Checks whether the "m" modifier is setmultiline 	للتحقق مما إذا تم تعيين المعدل "m"source 	Returns the text of the RegExp patternsource 	إرجاع نص نمط RegExp* *//** compile() 	Deprecated in version 1.5. Compiles a regular expression* compile() 	موقوف في الإصدار 1.5. يجمع تعبيرًا عاديًاexec() 	Tests for a match in a string. Returns the first matchexec() 	اختبارات تطابق في سلسلة. إرجاع المباراة الأولىtest() 	Tests for a match in a string. Returns true or falsetest() 	اختبارات تطابق في سلسلة. إرجاع صح أو خطأtoString() 	Returns the string value of the regular expressiontoString() 	ترجع قيمة سلسلة التعبير العادي* *///////////////////////////////////////////////////////// (OPP) ///////////////////////////////////////////////////////////////////////////////////////////////////////constructor functionfunction User(id , name) {    this.i = id    this.n = name}let userOne = new User(22 , "yousef")console.log(userOne.i)console.log(userOne.n)