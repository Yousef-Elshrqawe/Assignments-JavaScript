/*let myFirstPromise = new Promise((res, rej) => {    setTimeout(() => {        res("Iam the first Promise");    }, 5000);});let mySecondPromise = new Promise((res, rej) => {    setTimeout(() => {        res("Iam the Second Promise");    }, 1000);});let myThirdPromise = new Promise((res, rej) => {    setTimeout(() => {        rej("Iam the Third Promise");    }, 3000);});*//*Promise.all([myFirstPromise, mySecondPromise, myThirdPromise]).then( // يعني انا انتظر الكل    (resolvedValues) => console.log(resolvedValues),    (rejectedValues) => console.log(rejectedValues),);*//*Promise.allSettled([myFirstPromise, mySecondPromise, myThirdPromise]).then( // يعمل كل البروميسات ويعرض النتيجة    (resolvedValues) => console.log(resolvedValues),    (rejectedValues) => console.log(rejectedValues),);*//*Promise.race([myFirstPromise, mySecondPromise, myThirdPromise]).then( // اللي ينتهي اولا يتم عرضه    (resolvedValues) => console.log(resolvedValues),    (rejectedValues) => console.log(rejectedValues),);*///   - Async/*function myData() {    return new Promise((res, rej) => {        let user = ["Yousef", "Elzero", "Web"];        if (user.length > 0) {            res("users Fond");        } else {            rej("No Users Fond");        }    });}myData().then(    (res) => console.log(res),    (rej) => console.log(rej));*//*function myData() { //    let user = ["Yousef", "Elzero", "Web"];    if (user.length > 0) {        return Promise.resolve("users Fond");    } else {        return Promise.reject("No users Fond");    }}myData().then(    (res) => console.log(res),    (rej) => console.log(rej));*//*async function myData() {    let user = ["Yousef", "Elzero", "Web"];    if (user.length > 0) {        return "users Fond";    } else {        return "No users Fond";    }}myData().then(    (res) => console.log(res),    (rej) => console.log(rej));*///   - Await/*const myPromise = new Promise((res, rej) => {    setTimeout(() => {        rej("Iam the Good Promise");    }, 3000);});async function readData() {    console.log("Before Promise");    try {        console.log(await myPromise)    }catch (e) {        console.log(Error(e));    }finally {        console.log("After Promise");    }}readData()*///   - Fetchasync function FetchData() {    console.log("Before Promise");    try {        let myData = await fetch("https://jsonplaceholder.typicode.com/users");        let myJson = await myData.json();        console.log(myJson);    }catch (e) {        console.log(Error(e));    }finally {        console.log("After Fetch");    }}FetchData()