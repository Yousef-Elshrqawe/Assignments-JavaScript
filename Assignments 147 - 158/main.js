// constructor functionfunction User(id , name) {    this.i = id    this.n = name}let userOne = new User(22 , "yousef")console.log(userOne.i)console.log(userOne.n)/*  Constructor Function  - New Syntax*/class Book {    constructor(id, username, salary) {        this.i = id;        this.u = username;        this.s = salary + 1000;    }}console.log("------------Book------------")let Book1 = new Book(55, "PHP", 200);console.log(Book1.i);console.log(Book1.u);console.log(Book1.s);console.log(Book1 instanceof Book); // هل  الاب  بتاعها  Bookconsole.log(Book1.constructor === Book); // هل  الاب  بتاعها  Book/*  Constructor Function  - Deal With Properties And Methods*/console.log("-----Deal With Properties And Methods-----")class User2 {    constructor(id, username, salary) {        // Properties        this.i = id;        this.u = username || "Unknown";        this.s = salary < 6000 ? salary + 500 : salary;        this.msg = function () {            return `Hello ${this.u} Your Salary Is ${this.s}`;        };    }    // Methods    writeMsg() {        return `Hello ${this.u} Your Salary Is ${this.s}`;    }}let userFor = new User2(100, "Elzero", 5000);let userTwo = new User2(101, "", 6000);console.log(userFor.u);console.log(userFor.s);console.log(userFor.msg());console.log(userFor.writeMsg());console.log(userTwo.u);console.log(userTwo.s);console.log(userTwo.msg); // Native Codeconsole.log(userTwo.writeMsg); // Native Code/*  Constructor Function  - Update Properties  - Built In Constructors*/console.log(`------ Update Properties - Built In Constructors -----`)class User3 {    constructor(id, username, salary) {        this.i = id;        this.u = username;        this.s = salary;    }    updateName(newName) {        this.u = newName;    }}let userO = new User3(100, "Elzero", 5000);console.log(userO.u);userO.updateName("Yousef")console.log(userO.u);let strOne = "Elzero";let strTwo = new String("Elzero");console.log(typeof strOne);console.log(typeof strTwo);console.log(strOne instanceof String);console.log(strTwo instanceof String);console.log(strOne.constructor === String);console.log(strTwo.constructor === String);/*  Class  - Static Properties And Methods*/console.log("----- - Static Properties And Methods -----")class User4 {    // Static Property    static count = 0;    constructor(id, username, salary) {        this.i = id;        this.u = username;        this.s = salary;        User4.count++;    }    // Static Methods    static sayHello() {        return `Hello From Class`;    }    static countMembers() {        return `${this.count} Members Created`;    }}let userOnee = new User4(100, "Elzero", 5000);let userTwoo = new User4(101, "Ahmed", 5000);let userThree = new User4(102, "Sayed", 5000);console.log(userOnee.u);console.log(userTwoo.u);console.log(userOnee.count); // لا يمكن  الوصول  ليها  لانها  خاصه  ب  Object فقطconsole.log(User4.count);console.log(User4.sayHello());console.log(User4.countMembers());/*  Class  - Inheritance*/console.log("----- Inheritance -----")// Parent Classclass Parent {    constructor(id, username) {        this.i = id;        this.u = username;    }    sayHello() {        return `Hello ${this.u}`;    }}// Derived Classclass Admin extends Parent {    constructor(id, username, permissions) {        super(id, username);        this.p = permissions;    }}class Superman extends Admin {    constructor(id, username, permissions, ability) {        super(id, username, permissions);        this.a = ability;    }}let user1 = new Parent(100, "Elzero");let adminOne = new Admin(110, "Mahmoud", 1);console.log(user1.u);console.log(user1.sayHello());console.log("####");console.log(adminOne.i);console.log(adminOne.u);console.log(adminOne.p);console.log(adminOne.sayHello());/*  Encapsulation  - Class Fields Are Public By Default  - Guards The Data Against Illegal Access.  - Helps To Achieve The Target Without Revealing Its Complex Details.  - Will Reduce Human Errors.  - Make The App More Flexible And Manageable.  - Simplifies The App.*/console.log("-----  Encapsulation -----")class User6 {    // Private Property    #e;    constructor(id, username, eSalary) {        this.i = id;        this.u = username;        this.#e = eSalary;    }    getSalary() {        return parseInt(this.#e);    }}let user6 = new User6(100, "Elzero", "5000 Gneh");console.log(user6.u);console.log(user6.getSalary() * 0.3);console.log("#######")// Derived Classclass User7 extends User6{    constructor(id, username, eSalary , admin) {        super(id, username, eSalary)        this.a = admin    }}let user7 = new User7(200, "yousef", "8000 Gneh");console.log(user7.i);console.log(user7.u);console.log(user7.getSalary());/*  Prototype  - Introduction  - Prototypes are the mechanism by which JavaScript objects    inherit features from one another.*/console.log("----- Prototype -----")class User9 {    constructor(id, username) {        this.i = id;        this.u = username;    }    sayHello() {        return `Hello ${this.u}`;    }}let user9 = new User9(100, "Elzero");console.log(user9.u);console.log(User9.prototype);let str9 = "Elzero";console.log(String.prototype);/*  Prototype  - Add To Prototype Chain  - Extend Built In Constructors Features*/console.log("----- Prototype -----")class User10 {    constructor(id, username) {        this.i = id;        this.u = username;    }    sayHello() {        return `Hello ${this.u}`;    }}let user10 = new User10(100, "Elzero");console.log(user10.u);console.log(User.prototype);console.log(user10);User10.prototype.sayWelcome = function () {    return `Welcome ${this.u}`;};Object.prototype.love = "Elzero Web School";String.prototype.addDotBeforeAndAfter = function (val) {    return `.${this}.`;};let myString = "Elzero";/*  Object Meta Data And Descriptor  - writable  - enumerable  - configurable [Cannot Delete Or Reconfigure]*/console.log("----- Object Meta Data And Descriptor -----")const myObject = {    a: 1,    b: 2,};Object.defineProperty(myObject, "c", { // اضافه  بربرتي  جديده  او  التعديل  علي  بروبرتي  موجوده    writable: false,  // غير  قابل  للكتابه  عليها    enumerable: true, // لا تظهر  في  اي  لوب  يتم    configurable: false, //لو false ستكون  غير  قابله  للحذف  او  التعديل    value: 3,});// Object.defineProperty(myObject, "c", {//   writable: false,//   enumerable: true,//   configurable: true, <= Cannot redefine property//   value: 3,// });myObject.c = 100;console.log(delete myObject.c);for (let prop in myObject) {    console.log(prop, myObject[prop]);}console.log(myObject);/*  Object Meta Data And Descriptor  - Define Multiple Properties  - Check Descriptors*/console.log("-----  Object Meta Data And Descriptor -----")const myObjects = {    a: 1,    b: 2,};Object.defineProperties(myObjects, {    c: {        configurable: true,        value: 3,    },    d: {        configurable: true,        value: 4,    },    e: {        configurable: true,        value: 5,    },});console.log(myObjects);console.log(Object.getOwnPropertyDescriptor(myObjects, "d"));console.log(Object.getOwnPropertyDescriptors(myObjects));