/*  Date And Time  - Date Constructor  Static Methods  - Date.now() - returns the number of milliseconds since 1 January 1970 00:00:00 UTC  - To Track Time You Need Starting Point  - Epoch Time Or Unix Time In Computer Science Is The Number of Seconds Since January 1, 1970.  - Why 1970 [829 Days To 136 Years]  Search For  - Year 2038 Problem in Computer Science.*/console.log("----- Date And Time -----")let dateNow = new Date();  // From January 1 to the presentconsole.log(dateNow);console.log(Date.now()); // 1000 Mill = 1 Secondlet seconds = Date.now() / 1000; // Number Of Secondsconsole.log(`Seconds ${seconds}`);let minutes = seconds / 60; // Number Of Minutesconsole.log(`Minutes ${minutes}`);let hours = minutes / 60; // Number Of Hoursconsole.log(`Hours ${hours}`);let days = hours / 24; // Number Of Daysconsole.log(`Days ${days}`);let years = days / 365; // Number Of Yearsconsole.log(`Years ${years}`);/*  Date And Time  - getTime() => Number Of Milliseconds  - getDate() => Day Of The Month  - getFullYear()  - getMonth() => Zero Based  - getDay() => Day Of The Week  - getHours()  - getMinutes()  - getSeconds()*/console.log("----- getM -----")let Time = new Date();let birthday = new Date("Oct 25, 82");let dateDiff = Time - birthday;console.log(dateDiff);console.log(dateDiff / 1000 / 60 / 60 / 24 / 365); // Number Of Yearsconsole.log(Time);console.log(Time.getTime()); // Number Of Millisecondsconsole.log(Time.getDate()); // Day Of The Monthconsole.log(Time.getFullYear()); // Yearconsole.log(Time.getMonth()); // Zero Basedconsole.log(Time.getDay()); // Day Of The Weekconsole.log(Time.getHours()); // Hoursconsole.log(Time.getMinutes()); // Minutesconsole.log(Time.getSeconds()); // Seconds/*  Date And Time  - setTime(Milliseconds)  - setDate() => Day Of The Month [Negative And Positive]  - setFullYear(year, month => Optional [0-11], day => Optional [1-31])  - setMonth(Month [0-11], Day => Optional [1-31]) [Negative And Positive]  - setHours(Hours [0-23], Minutes => Optional [0-59], Seconds => Optional [0-59], MS => Optional [0-999])  - setMinutes(Minutes [0-59], Seconds => Optional [0-59], MS => Optional [0-999])  - setSeconds(Seconds => [0-59], MS => Optional [0-999])*/let dateTime = new Date();console.log(dateTime);console.log("#".repeat(66));dateTime.setTime(0); // 1970console.log(dateTime);  // Thu Jan 01 1970 02:00:00 GMT+0200 (Eastern European Standard Time)console.log("#".repeat(66));dateTime.setTime(10000); // 10 Secondsconsole.log(dateTime);console.log("#".repeat(66));dateTime.setDate(35); // 35 - 31 = 4console.log(dateTime);dateTime.setFullYear(2020, 13); // 2021console.log(dateTime);dateTime.setMonth(15); // 15 - 12 = 3console.log(dateTime);dateTime.setHours(0 , 0 , 1  ); // 1 AMconsole.log(dateTime);/*  Date And Time  - Track Operations Time  Search  - performance.now()  - performance.mark()*/console.log("----- Track Operations Time -----")// Start Timeconst start = performance.now();// Operationfor (let i = 0; i < 100000; i++) {    // document.write(`<div>${i}</div>`);   /* let div = document.createElement("div");    div.appendChild(document.createTextNode(i));    document.body.appendChild(div);*/     let div = document.createElement("div");     div.innerText = i;     document.body.appendChild(div);}// Time Endconst end = performance.now();// Operation Durationlet duration = end - start;console.log(duration);/*  Generators  - Generator Function Run Its Code When Required.  - Generator Function Return Special Object [Generator Object]  - Generators Are Iterable*/console.log("----- Generators -----")function* generateNumbers() { // Generator Function    yield 1; // Generator Object    console.log("Hello After Yield 1");    yield 2;    yield 3;    yield 4;}let generator = generateNumbers(); // Generator Objectconsole.log(typeof generator); // objectconsole.log(generator);console.log(generator.next()); // {value: 1, done: false}console.log(generator.next()); // {value: 2, done: false}console.log(generator.next()); // {value: 3, done: false}console.log(generator.next()); // {value: 4, done: false}console.log(generator.next()); // {value: undefined, done: true}for (let value of generateNumbers()) { // Iterable    console.log(value); // 1, 2, 3, 4}for (let value of generator) { // Iterable    console.log(value); // ""}/*  Generators  - Delegate Generator*/console.log("----- Delegate Generator -----")function* generateNums() {    yield 1;    yield 2;    yield 3;}function* generateLetters() {    yield "A";    yield "B";    yield "C";}function* generateAll() {    yield* generateNums();    yield* generateLetters();    yield* [4, 5, 6]; // Iterable}let generator1 = generateAll(); // Generator Objectconsole.log(generator1.next()); // {value: 1, done: false}console.log(generator1.next()); // {value: 2, done: false}console.log(generator1.next()); // {value: 3, done: false}console.log(generator1.next()); // {value: "A", done: false}console.log(generator1.next()); // {value: "B", done: false}console.log(generator1.next()); // {value: 4, done: false}console.log(generator1.return("Z")); // {value: "Z", done: true}console.log(generator1.next()); // {value: undefined, done: true}console.log(generator1.next()); // {value: undefined, done: true}console.log(generator1.next()); // {value: undefined, done: true}